name: 自动构建和发布

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 检查是否需要发布新版本
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      new-version: ${{ steps.version-check.outputs.new-version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 检查版本变化
      id: version-check
      run: |
        # 获取当前版本
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "当前版本: $CURRENT_VERSION"
        
        # 检查是否存在相同版本的tag
        if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
          echo "版本 v$CURRENT_VERSION 已存在，跳过发布"
          echo "should-release=false" >> $GITHUB_OUTPUT
        else
          echo "新版本 v$CURRENT_VERSION 需要发布"
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        fi

  # 构建Windows版本
  build:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: 缓存 Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 构建项目
      run: cargo build --release --target x86_64-pc-windows-msvc

    - name: 下载最新版本的 scrcpy
      run: |
        # 获取最新版本信息
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/Genymobile/scrcpy/releases/latest"
        $version = $latestRelease.tag_name
        
        Write-Host "获取到 scrcpy 版本: $version"
        Write-Host "可用的资源文件:"
        $latestRelease.assets | ForEach-Object { Write-Host "  - $($_.name)" }
        
        # 查找 Windows 版本的下载链接（可能的文件名格式）
        $windowsAsset = $latestRelease.assets | Where-Object { 
          $_.name -like "*win64*" -or 
          $_.name -like "*windows*" -or 
          $_.name -like "*win*" 
        } | Select-Object -First 1
        
        if (-not $windowsAsset) {
          Write-Error "未找到 Windows 版本的 scrcpy"
          Write-Host "尝试查找所有 .zip 文件:"
          $latestRelease.assets | Where-Object { $_.name -like "*.zip" } | ForEach-Object { Write-Host "  - $($_.name)" }
          
          # 如果没找到特定的 Windows 版本，尝试使用第一个 zip 文件
          $windowsAsset = $latestRelease.assets | Where-Object { $_.name -like "*.zip" } | Select-Object -First 1
        }
        
        if (-not $windowsAsset) {
          Write-Error "未找到任何可用的 scrcpy 下载文件"
          exit 1
        }
        
        $downloadUrl = $windowsAsset.browser_download_url
        $fileName = $windowsAsset.name
        
        Write-Host "下载 scrcpy $version"
        Write-Host "文件名: $fileName"
        Write-Host "下载地址: $downloadUrl"
        
        # 下载 scrcpy
        Invoke-WebRequest -Uri $downloadUrl -OutFile "scrcpy.zip"
        
        # 解压到临时文件夹
        Expand-Archive -Path "scrcpy.zip" -DestinationPath "temp_extract" -Force
        
        # 查找解压后的文件夹
        $extractedFolders = Get-ChildItem -Path "temp_extract" -Directory
        Write-Host "解压后的文件夹:"
        $extractedFolders | ForEach-Object { Write-Host "  - $($_.Name)" }
        
        # 找到包含 scrcpy.exe 的文件夹
        $scrcpyFolder = $null
        foreach ($folder in $extractedFolders) {
          $scrcpyExe = Join-Path $folder.FullName "scrcpy.exe"
          if (Test-Path $scrcpyExe) {
            $scrcpyFolder = $folder
            break
          }
        }
        
        if (-not $scrcpyFolder) {
          # 如果没有子文件夹，检查是否直接解压到了 temp_extract
          $scrcpyExe = Join-Path "temp_extract" "scrcpy.exe"
          if (Test-Path $scrcpyExe) {
            # 直接使用 temp_extract 作为 scrcpy 文件夹
            Rename-Item "temp_extract" "scrcpy"
            Write-Host "scrcpy 文件直接解压，重命名完成"
          } else {
            Write-Error "未找到 scrcpy.exe 文件"
            Write-Host "temp_extract 目录内容:"
            Get-ChildItem -Path "temp_extract" -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }
            exit 1
          }
        } else {
          # 移动找到的文件夹到根目录并重命名
          Move-Item $scrcpyFolder.FullName "scrcpy"
          Remove-Item "temp_extract" -Recurse -Force
          Write-Host "scrcpy 文件夹重命名完成: $($scrcpyFolder.Name) -> scrcpy"
        }
        
        # 验证 scrcpy 文件夹内容
        Write-Host "scrcpy 文件夹内容:"
        Get-ChildItem -Path "scrcpy" | ForEach-Object { Write-Host "  - $($_.Name)" }

    - name: 准备发布文件
      run: |
        mkdir release
        
        # 复制启动器程序
        copy target\x86_64-pc-windows-msvc\release\scrcpy-launcher.exe release\scrcpy-launcher.exe
        
        # 复制整个 scrcpy 文件夹
        xcopy scrcpy release\scrcpy\ /E /I /H /Y
        
        # 创建使用说明
        echo "# scrcpy 智能启动器" > release\README.md
        echo "" >> release\README.md
        echo "## 使用方法" >> release\README.md
        echo "1. 确保 Android 设备已开启 USB 调试" >> release\README.md
        echo "2. 连接设备到电脑" >> release\README.md
        echo "3. 双击运行 scrcpy-launcher.exe" >> release\README.md
        echo "4. 程序会自动检测设备并启动 scrcpy" >> release\README.md
        echo "" >> release\README.md
        echo "## 包含组件" >> release\README.md
        echo "- scrcpy-launcher.exe: 智能启动器主程序" >> release\README.md
        echo "- scrcpy/: scrcpy 完整程序包" >> release\README.md
        
        # 显示文件结构
        Write-Host "发布文件结构:"
        tree release /F

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: scrcpy-launcher-windows
        path: release/

  # 创建发布
  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 准备发布文件
      run: |
        mkdir -p release-temp
        
        # 复制构建产物到临时目录
        cp -r artifacts/scrcpy-launcher-windows/* release-temp/
        
        # 创建最终的压缩包
        cd release-temp
        zip -r ../scrcpy-launcher-windows-v${{ needs.check-version.outputs.new-version }}.zip .
        cd ..
        
        # 移动压缩包到 release 目录
        mkdir -p release
        mv scrcpy-launcher-windows-v${{ needs.check-version.outputs.new-version }}.zip release/
        
        ls -la release/

    - name: 生成更新日志
      id: changelog
      run: |
        VERSION="${{ needs.check-version.outputs.new-version }}"
        echo "## 🚀 scrcpy 智能启动器 v$VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ✨ 主要功能" >> CHANGELOG.md
        echo "- 📱 实时监控 Android 设备连接状态" >> CHANGELOG.md
        echo "- 🚀 自动启动 scrcpy 进行屏幕镜像" >> CHANGELOG.md
        echo "- 💻 现代化 TUI 界面，美观实用" >> CHANGELOG.md
        echo "- ⚡ 快速响应，1秒内检测设备变化" >> CHANGELOG.md
        echo "- 📦 完整打包，包含最新版本 scrcpy" >> CHANGELOG.md
        echo "- 🛡️ 无需管理员权限运行" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📦 下载说明" >> CHANGELOG.md
        echo "- 下载完整的发布包，解压后即可使用" >> CHANGELOG.md
        echo "- 包含 scrcpy-launcher.exe 和完整的 scrcpy 程序" >> CHANGELOG.md
        echo "- 支持 Windows 10/11 系统" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🔧 使用方法" >> CHANGELOG.md
        echo "1. 下载并解压发布包" >> CHANGELOG.md
        echo "2. 确保 Android 设备已开启 USB 调试" >> CHANGELOG.md
        echo "3. 连接设备到电脑" >> CHANGELOG.md
        echo "4. 双击运行 scrcpy-launcher.exe" >> CHANGELOG.md
        echo "5. 程序会自动检测设备并启动 scrcpy" >> CHANGELOG.md
        
        # 设置输出变量
        {
          echo 'CHANGELOG<<EOF'
          cat CHANGELOG.md
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: 创建 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        name: scrcpy 智能启动器 v${{ needs.check-version.outputs.new-version }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

